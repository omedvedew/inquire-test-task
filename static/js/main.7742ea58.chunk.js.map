{"version":3,"sources":["App/Footer/Footer.js","App/Header/Logo.js","App/Header/Menu.js","App/Header/Header.js","App/Main/PostsListItem.js","App/Main/PostsList.js","App/Main/GreetingsPage.js","App/Main/Comments.js","App/Main/PostChangeForm.js","App/Main/PostPage.js","App/Main/NewPostPage.js","App/Main/Main.js","App/App.js","index.js","redux/rootReducer.js"],"names":["Footer","className","Logo","to","style","backgroundImage","Menu","Header","connect","state","dispatch","dispatchPostId","value","type","id","title","body","onClick","PostsList","useState","posts","setPosts","length","fetch","then","res","json","prevState","console","log","map","GreetingsPage","Comments","currentPost","comments","PostChangeForm","isChangesSubmited","changes","setChanges","onSubmit","e","preventDefault","axios","put","placeholder","onChange","target","rows","isPostDeleted","isPostChanged","setCurrentPost","postToBeRenderedId","isPostDownloaded","renderNoCommentsMessage","handleChangeState","deletePost","delete","isCommentSent","newComment","setNewComment","handleCommentContent","handleCommentAuthor","author","sendComment","post","postId","undefined","NewPostPage","isFormSent","newPost","setNewPost","getRandomId","randomId","chars","charsLength","i","push","charAt","Math","floor","random","join","Main","path","exact","component","PostPage","App","store","createStore","action","newPostState","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7742ea58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>Olexii Medvediev's test task</p>\r\n            <p>Lviv</p>\r\n            <p>2021</p>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"header__logo\">\r\n            <Link to=\"/inquire-test-task/\" className=\"header__logo__item\" style={{backgroundImage: 'url(/images/inquire-logo.png)'}}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <div className=\"header__menu\">\r\n            <Link to=\"/inquire-test-task/blog\" className=\"header__menu__item\">blog</Link>\r\n            <Link to=\"/inquire-test-task/new-post\" className=\"header__menu__item\">new post</Link>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Menu;","import React from 'react';\r\nimport Logo from './Logo';\r\nimport Menu from './Menu';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <Logo/>\r\n            <Menu/>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PostsListItem = ({\r\n    id,\r\n    title,\r\n    body,\r\n    dispatchPostId,\r\n}) => {\r\n    return (\r\n        <>\r\n            <article className=\"m-p-i_article\">\r\n                <h2 className=\"m-p-i_article_title\">{title}</h2>\r\n                <p className=\"m-p-i_article_body\">{body}</p>\r\n                <Link to=\"/inquire-test-task/blog/post-page\" className=\"m-p-i_article_more-btn\" onClick={() => dispatchPostId(id)}>read more</Link>\r\n            </article>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    state,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    dispatchPostId: (value) => dispatch({\r\n        type: \"DISPATCH_POST_ID\",\r\n        value,\r\n    })\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (PostsListItem);","import React, { useState } from 'react';\r\nimport PostsListItem from './PostsListItem';\r\n\r\nconst PostsList = () => {\r\n\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    posts.length === 0?\r\n    fetch('https://bloggy-api.herokuapp.com/posts')\r\n    .then(res => res.json())\r\n    .then(json => (\r\n        setPosts(prevState => ([\r\n            ...prevState,\r\n            ...json,\r\n        ]))\r\n    ))\r\n    : console.log('waiting for response');\r\n\r\n    console.log(posts);\r\n    return (\r\n        <div className=\"main__posts-list-container\">\r\n            {\r\n                posts.map(({id, title, body}) => (\r\n                    <div className=\"main__posts-list-container__item\" key={id}>\r\n                        <PostsListItem\r\n                            id={id}\r\n                            title={title}\r\n                            body={body}\r\n                        />\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PostsList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst GreetingsPage = () => {\r\n    return (\r\n        <div className=\"main__greetings-page\">\r\n            <h1 className=\"main__greetings-page_title\">Welcome to Olexii's test task page!</h1>\r\n            <Link to=\"/inquire-test-task/blog\" className=\"main__greetings-page_get-started-btn\">get started</Link>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GreetingsPage;","import React from 'react';\r\n\r\nconst Comments = ({\r\n    currentPost,\r\n}) => {\r\n    return (\r\n        <div className=\"m-p-p_comments_comments-box\">\r\n            {\r\n                currentPost.comments.map(({id, body}) => (\r\n                    <div className=\"comment\" key={id}>\r\n                        <h4>{id}:</h4>\r\n                        <p>{body}</p>\r\n                    </div>\r\n                ))\r\n            }   \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Comments;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PostChangeForm = ({\r\n    id,\r\n}) => {\r\n    // Using 'useState' hook to implement changing form submit\r\n    const [changes, setChanges] = useState({\r\n        isChangesSubmited: false\r\n    });\r\n\r\n    // Function for entering new title for post\r\n    const handleTitle = (e) => {\r\n        setChanges(prevState => ({\r\n            ...prevState,\r\n            title: e.target.value,\r\n        }))\r\n    };\r\n\r\n    // Function for entering new content for post\r\n    const handleContent = (e) => {\r\n        setChanges(prevState => ({\r\n            ...prevState,\r\n            body: e.target.value,\r\n        }))\r\n    };\r\n\r\n    // Sumbit form function \r\n    const sendChanges = (e) => {\r\n        e.preventDefault();\r\n        axios.put(`https://bloggy-api.herokuapp.com/posts/${id}`, {\r\n            title: changes.title,\r\n            body: changes.body\r\n        });\r\n        setChanges(prevState => ({\r\n            ...prevState,\r\n            isChangesSubmited: true\r\n        }));\r\n    }; \r\n\r\n    // Main component of PostChangeForm\r\n    return (\r\n        <>\r\n            {\r\n                changes.isChangesSubmited === false ?\r\n                <form className=\"m-p-p_post-change-form\" onSubmit={sendChanges}>\r\n                    <h2 className=\"m-p-p_form-title\">Change this post:</h2>\r\n                    <div className=\"m-p-p_input-box\">\r\n                        <h3 className=\"m-p-p_input-title\">Post's title</h3>\r\n                        <input type=\"text\" placeholder=\"Enter post title\" className=\"m-p-p_input\" onChange={handleTitle}/>\r\n                    </div>\r\n                    <div className=\"m-p-p_input-box\">\r\n                        <h3 className=\"m-p-p_input-title\">Post's content</h3>\r\n                        <textarea type=\"text\" placeholder=\"Enter post content\" className=\"m-p-p_input\" rows=\"5\" onChange={handleContent}/>\r\n                    </div>\r\n                    <button className=\"m-p-p_submit-btn\">submit</button>\r\n                </form>\r\n                : <div className=\"m-p-p_message\">Thanks for changes!</div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PostChangeForm;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Comments from './Comments';\r\nimport axios from 'axios';\r\nimport PostChangeForm from './PostChangeForm';\r\n\r\nconst PostPage = ({\r\n    state,\r\n}) => {\r\n    // Checking if redux works\r\n    console.log(state);\r\n\r\n    // Using 'useState' hook to implement current post page\r\n    const [currentPost, setCurrentPost] = useState({\r\n        isPostDeleted: false,\r\n        isPostChanged: false,\r\n    });\r\n\r\n    // Function for getting info about post from server\r\n    const getCurrentPost = () => {\r\n        if (state.isPostDownloaded !== true) {\r\n            fetch(`https://bloggy-api.herokuapp.com/posts/${state.postToBeRenderedId}?_embed=comments`)\r\n            .then(res => res.json())\r\n            .then(json => (\r\n                setCurrentPost(prevState => ({\r\n                    ...prevState,\r\n                    ...json,\r\n                }))\r\n            ));\r\n        };\r\n        state.isPostDownloaded = true;\r\n        console.log(currentPost);\r\n    };\r\n    // Calling function to get info from server\r\n    state.postToBeRenderedId ? getCurrentPost() : console.log('waiting for response');\r\n\r\n    // Function for rendering message if there are no comments for the current post\r\n    const renderNoCommentsMessage = () => {\r\n        return (\r\n            <div className=\"m-p-p_comments_comments-box\">There is no comments to this post.</div>\r\n        )\r\n    };\r\n\r\n    // Function for rendering message if current post wasn't selected or page has been refreshed\r\n    const renderMessage = () => {\r\n        return (\r\n            <div className=\"main__post-page__message\">\r\n                <p>We are waiting for server response or the current post wasn't selected, please return to <Link to=\"/inquire-test-task/blog\">blog page</Link> and select a post you would like to see.</p>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    // Changing status check\r\n    const handleChangeState = () => {\r\n        setCurrentPost(prevState => ({\r\n            ...prevState,\r\n            isPostChanged: true,\r\n        }))\r\n    };\r\n\r\n    // Function to delete current post\r\n    const deletePost = () => {\r\n        axios.delete(`https://bloggy-api.herokuapp.com/posts/${state.postToBeRenderedId}`);\r\n        setCurrentPost(() => ({\r\n            isPostDeleted: true\r\n        }));\r\n    };\r\n\r\n    // 'useState' hook for implement new comment sending\r\n    const [newComment, setNewComment] = useState({\r\n        isCommentSent: false\r\n    });\r\n\r\n    // Function for entering new comment content\r\n    const handleCommentContent = (e) => {\r\n        setNewComment(prevState => ({\r\n            ...prevState,\r\n            body: e.target.value\r\n        }))\r\n    };\r\n\r\n    // Function for entering new comment author\r\n    const handleCommentAuthor = (e) => {\r\n        setNewComment(prevState => ({\r\n            ...prevState,\r\n            author: e.target.value\r\n        }))\r\n    };\r\n\r\n    // Send new comment function\r\n    const sendComment = (e) => {\r\n        e.preventDefault();\r\n        axios.post(`https://bloggy-api.herokuapp.com/comments`, {\r\n            postId: state.postToBeRenderedId,\r\n            body: newComment.body,\r\n            id: newComment.author,\r\n        })\r\n        setNewComment(() => ({\r\n            isCommentSent: true\r\n        }))\r\n    };\r\n\r\n    // Function for rendering main content of PostPage component\r\n    const renderPostPage = () => {\r\n        return (\r\n            <>\r\n                {\r\n                    state.isPostDownloaded === true ?\r\n                    <div className=\"main__post-page__post\">\r\n                        <h1 className=\"m-p-p_title\">{currentPost.title}</h1>\r\n                        <p className=\"m-p-p_body\">{currentPost.body}</p>\r\n                        <div className=\"m-p-p_comments\">\r\n                            <h3 className=\"m-p-p_comments_title\">Comments:</h3>\r\n                            {\r\n                                currentPost.comments !== undefined && currentPost.comments !== null ?\r\n                                (currentPost.comments.length > 0?\r\n                                    <Comments\r\n                                        currentPost={currentPost}\r\n                                    /> : renderNoCommentsMessage()\r\n                                )\r\n                                : renderNoCommentsMessage() \r\n                            }\r\n                            {\r\n                                newComment.isCommentSent === false ?\r\n                                <>\r\n                                    <h3 className=\"m-p-p_comments-title\">Add new comment:</h3>\r\n                                    <form className=\"m-p-p_form\" onSubmit={sendComment}>\r\n                                        <input type=\"text\" placeholder=\"Enter your name\" className=\"m-p-p_input\" onChange={handleCommentAuthor}/>\r\n                                        <textarea className=\"m-p-p_input\" rows=\"5\" placeholder=\"Enter comment\" onChange={handleCommentContent}/>\r\n                                        <button className=\"m-p-p_send-btn\" type=\"submit\">send</button>\r\n                                    </form>\r\n                                </>\r\n                                : <h3 className=\"m-p-p_comments-title\">Thanks for your comment!</h3>\r\n                            }\r\n                            \r\n                        </div>\r\n                        <div className=\"m-p-p_buttons-container\">\r\n                            {\r\n                                currentPost.isPostChanged === false ?\r\n                                <button className=\"m-p-p_change-btn\" onClick={handleChangeState}>change this post</button>\r\n                                : \r\n                                <PostChangeForm\r\n                                    id={state.postToBeRenderedId}\r\n                                />\r\n                            }\r\n                            <button className=\"m-p-p_delete-btn\" onClick={deletePost}>delete this post</button>\r\n                        </div>\r\n                    </div> \r\n                    : renderMessage()\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    // Main component of PostPage\r\n    return (\r\n        <div className=\"main__post-page\">\r\n            {\r\n                currentPost.isPostDeleted === false ?\r\n                renderPostPage()\r\n                : <div className=\"main__post-page__delete-message\">This post was deleted! Visit <Link to=\"/inquire-test-task/blog\">&nbsp;blog page&nbsp;</Link> to see another one.</div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n// Redux function for connecting reducer state to this component props\r\nconst mapStateToProps = (state) => ({\r\n    state\r\n});\r\n\r\nexport default connect(mapStateToProps) (PostPage);","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst NewPostPage = () => {\r\n\r\n    // Using 'useState' hook to implement new post\r\n    const [newPost, setNewPost] = useState({\r\n        isFormSent: false,\r\n    });\r\n\r\n    // Function for entering new post title\r\n    const handleNewPostTitle = (e) => {\r\n        setNewPost((prevState) => ({\r\n            ...prevState,\r\n            title: e.target.value\r\n        }))\r\n    };\r\n\r\n    // Function for entering new post content\r\n    const handleNewPostContent = (e) => {\r\n        setNewPost((prevState) => ({\r\n            ...prevState,\r\n            body: e.target.value\r\n        }))\r\n    };\r\n\r\n    // Submit form\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        function getRandomId() {\r\n            let randomId = [];\r\n            let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n            let charsLength = chars.length;\r\n            for ( let i = 0; i < 10; i++ ) {\r\n                randomId.push(chars.charAt(Math.floor(Math.random() * charsLength)));\r\n            }\r\n            return randomId.join('');\r\n        };\r\n        setNewPost((prevState)=> ({\r\n            ...prevState,\r\n            id: getRandomId(),\r\n            isFormSent: true\r\n        }));\r\n        axios.post(`https://bloggy-api.herokuapp.com/posts`, {\r\n            id: newPost.id,\r\n            title: newPost.title,\r\n            body: newPost.body\r\n        });\r\n    };\r\n\r\n    // Message rendered after post has been sent \r\n    const renderMessage = () => {\r\n        return (\r\n            <>\r\n                <p>Thank you for sending a new post, you will find it at the <Link to=\"/inquire-test-task/blog\">blog page</Link>.</p>\r\n            </>\r\n        )\r\n    };\r\n\r\n    // Main component of NewPostPage\r\n    return (\r\n        <div className=\"main__new-post-page\">\r\n            <h2 className=\"main__new-post-page__title\">Create your post here</h2>\r\n            {\r\n                newPost.isFormSent === false ?\r\n                <form className=\"main__new-post-page__form\" onSubmit={submitForm}>\r\n                    <div className=\"m-n-f_input-box\">\r\n                        <h3 className=\"m-n-f_input-title\">Post's title</h3>\r\n                        <input type=\"text\" placeholder=\"Enter post title\" className=\"m-n-f_input\" onChange={handleNewPostTitle}/>\r\n                    </div>\r\n                    <div className=\"m-n-f_input-box\">\r\n                        <h3 className=\"m-n-f_input-title\">Post's content</h3>\r\n                        <textarea type=\"text\" placeholder=\"Enter post content\" className=\"m-n-f_input\" rows=\"5\" onChange={handleNewPostContent}/>\r\n                    </div>\r\n                    <button className=\"m-n-f_submit-btn\">submit</button>\r\n                </form>\r\n                : renderMessage()\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NewPostPage;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport PostsList from './PostsList';\r\nimport GreetingsPage from './GreetingsPage';\r\nimport PostPage from './PostPage';\r\nimport NewPostPage from './NewPostPage';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <main className=\"main\">\r\n            <Route path='/inquire-test-task/' exact component={GreetingsPage}/>\r\n            <Route path=\"/inquire-test-task/blog\" exact component={PostsList}/>\r\n            <Route path=\"/inquire-test-task/blog/post-page\" exact component={PostPage}/>\r\n            <Route path=\"/inquire-test-task/new-post\" exact component={NewPostPage}/>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default Main;","import React from 'react';\n\nimport '../common/style/style.css';\nimport Footer from './Footer/Footer';\nimport Header from './Header/Header';\nimport Main from './Main/Main';\n\nconst App = () => {\n  return (\n    <>\n      <Header/>\n      <Main/>\n      <Footer/>\n    </>\n  )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport { rootReducer } from './redux/rootReducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);","export const rootReducer = (state={}, action) => {\r\n    switch (action.type) {\r\n        case \"DISPATCH_POST_ID\":\r\n            return {\r\n                ...state,\r\n                postToBeRenderedId: action.value,\r\n                isPostDownloaded: false,\r\n            };\r\n\r\n        case \"DISPATCH_NEW_POST\":\r\n            return {\r\n                ...state,\r\n                newPostState: {\r\n                    id: action.id,\r\n                    title: action.title,\r\n                    body: action.body,\r\n                    comments: [],\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};"],"sourceRoot":""}